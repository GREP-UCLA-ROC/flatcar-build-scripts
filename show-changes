#!/bin/bash
set -euo pipefail

FETCH="${FETCH-1}"
SCRIPTFOLDER="$(dirname "$(readlink -f "$0")")"

if [ $# -lt 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "Usage: $0 OLD [NEW]"
  echo "Shows the changes between the git references by assembling the changelog/ folder entries"
  echo "Should be run in the folder that contains the coreos-overlay, portage-stable, and scripts repository folders."
  echo "The NEW reference can be omitted and will then default to HEAD."
  exit 1
fi

OLD="$1"
NEW="${2-HEAD}"


echo "Changes since ${OLD}"


for section in security bugfixes changes updates; do
  echo
  case "${section}" in
    security)
      echo "## Security fixes:"
      ;;
    bugfixes)
      echo "## Bug fixes:"
      ;;
    changes)
      echo "## Changes:"
      ;;
    updates)
      echo "## Updates:"
      ;;
    *)
      echo "wrong cases" > /dev/stderr
      exit 1
  esac
  echo
  if [ "${section}" = security ]; then
      FROM_KERNEL=$(git -C coreos-overlay show "${OLD}":sys-kernel/coreos-kernel/ | grep -m 1 'coreos-kernel-.*\.ebuild' | cut -d - -f 3 | cut -d . -f 1-3)
      TO_KERNEL=$(git -C coreos-overlay show "${NEW}":sys-kernel/coreos-kernel/ | grep -m 1 'coreos-kernel-.*\.ebuild' | cut -d - -f 3 | cut -d . -f 1-3)
      if [ "${FROM_KERNEL}" != "${TO_KERNEL}" ]; then
        KERNEL_ENTRIES=$("${SCRIPTFOLDER}"/show-fixed-kernel-cves.py -f "${FROM_KERNEL}" -t "${TO_KERNEL}")
        if [ "${KERNEL_ENTRIES}" != "" ]; then
          echo "- Linux (${KERNEL_ENTRIES})"
        fi
      fi
  fi
  for repo in coreos-overlay portage-stable scripts; do
    if [ "${repo}" = scripts ] && [ ! -e "${repo}" ]; then
      repo="flatcar-scripts"
    fi
    if [ "${FETCH}" = 1 ]; then
      git -C "${repo}" fetch -t -f 2> /dev/null > /dev/null || { echo "Error: git fetch -t -f failed" ; exit 1 ; }
    fi
    # TODO: when the coreos-overlay and portage-stable submodules are pointing to the right version, use them directly instead of "-C repo"
    # (and allow to operate in "scripts" instead of the top directory)
    git -C "${repo}" difftool --no-prompt --extcmd='sh -c "cat \"$REMOTE\"" --' "${OLD}..${NEW}" -- "changelog/${section}/" | sort || { echo "Error: git difftool failed" ; exit 1 ; }
    # The -x 'sh -c "cat \"$REMOTE\"" --' command assumes that new changes have their own changelog files,
    # and thus ignores the LOCAL file (which is the empty /dev/null) and prints out the REMOTE completly.
    # If an existing file got changed, we assume that this is just a correction for the old change but
    # shouldn't be included in the release notes again.
  done
done
