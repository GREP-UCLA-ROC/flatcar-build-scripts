#!/bin/bash

if [ $# -lt 2 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "Usage: $0 FLATCAR_VERSION_A FLATCAR_VERSION_B"
  echo "Shows the ebuild package changes between two Flatcar versions"
  echo "Environment variables:"
  echo "Set FROM_(A|B)=(release|bincache|file://.../) to select an other image location than the bucket (note that file://.../ should be the directory where VERSION_. is appended, you may use '.' for the version)"
  echo "Set BOARD_(A|B)=arm64-usr to select an arm64 build (ignored if FROM_.=file...)"
  echo "Set CHANNEL_(A|B)=(alpha|beta|lts|developer) to select a build for another channel than stable (ignored for FROM_.=bincache|file...)"
  echo "Set FILE=(flatcar_production_image_contents.txt|flatcar_developer_container_packages.txt|flatcar_developer_container_contents.txt|flatcar_production_image_kernel_config.txt)"
  echo "  to show image contents or developer container packages instead of flatcar_production_image_packages.txt"
  echo "Set MODE_(A|B)=/developer/ to select a developer build (only for FROM_.=bucket)"
  echo "Set FILESONLY=1 to reduce the flatcar_production_image_contents.txt file to contain only path information"
  echo "Set CUTKERNEL=1 to reduce the flatcar_production_image_contents.txt file to contain no kernel version in paths but just 'a.b.c-flatcar'"
  echo "Alternatively, set CALCSIZE=1 to sum up the file sizes from flatcar_production_image_contents.txt (/boot and /usr, excluding symlinks and directories)"
  exit 1
fi

set -euo pipefail

FROM_A="${FROM_A-bucket}"
FROM_B="${FROM_B-bucket}"
CHANNEL_A="${CHANNEL_A-stable}"
CHANNEL_B="${CHANNEL_B-stable}"
BOARD_A="${BOARD_A-amd64-usr}"
BOARD_B="${BOARD_B-amd64-usr}"
MODE_A="${MODE_A-/}"
MODE_B="${MODE_B-/}"
FILE="${FILE-flatcar_production_image_packages.txt}"
VERSION_A="$1"
VERSION_B="$2"
FILESONLY="${FILESONLY-0}"
CUTKERNEL="${CUTKERNEL-0}"
CALCSIZE="${CALCSIZE-0}"

A="$(mktemp "/tmp/$VERSION_A-XXXXXX")"
B="$(mktemp "/tmp/$VERSION_B-XXXXXX")"

trap "rm -f \"$A\" \"$B\"" EXIT

if [ "$FROM_A" = "release" ]; then
  URL_A="https://${CHANNEL_A}.release.flatcar-linux.net/${BOARD_A}/${VERSION_A}/${FILE}"
elif [ "$FROM_A" = "bincache" ]; then
  URL_A="https://bincache.flatcar-linux.net/images/${BOARD_A/-usr/}/${VERSION_A}/${FILE}"
elif echo "$FROM_A" | grep -q '^file'; then
  URL_A="${FROM_A}/${VERSION_A}/${FILE}"
else
  URL_A="https://bucket.release.flatcar-linux.net/flatcar-jenkins${MODE_A}${CHANNEL_A}/boards/${BOARD_A}/${VERSION_A}/${FILE}"
fi
if [ "$FROM_B" = "release" ]; then
  URL_B="https://${CHANNEL_B}.release.flatcar-linux.net/${BOARD_B}/${VERSION_B}/${FILE}"
elif [ "$FROM_B" = "bincache" ]; then
  URL_B="https://bincache.flatcar-linux.net/images/${BOARD_B/-usr/}/${VERSION_B}/${FILE}"
elif echo "$FROM_B" | grep -q '^file'; then
  URL_B="${FROM_B}/${VERSION_B}/${FILE}"
else
  URL_B="https://bucket.release.flatcar-linux.net/flatcar-jenkins${MODE_B}${CHANNEL_B}/boards/${BOARD_B}/${VERSION_B}/${FILE}"
fi

curl --location --silent -S -o "$A" "$URL_A"
curl --location --silent -S -o "$B" "$URL_B"

function no_hardlinks {
    local f="${1}"; shift
    local -a lines
    lines=()
    local line pair clear_line hardlink size key
    # cache contains entries in form of <hardlink_count>:<size>, if
    # such a key exists in cache then the line should be ignored for
    # size accounting
    local -A cache

    cache=()
    # ignore directories and symlinks
    #
    # for each non-ignored line print <hardlink_count>:<size>@<original_line>
    #
    # that way we can generate a key for the cache; if they key is not
    # in cache, we print the original line and insert the key into
    # cache, otherwise we ignore the line - each hardlink is accounted
    # for just once
    #
    # hardlink count of 1 is a special case - we always print the line
    # and don't bother with adding it to cache
    #
    # handy, since git seems to be a hardlink farm - it has around 140
    # binaries being actually hardlinks to a single 3mb file
    mapfile -t lines < <(grep -v '^[dl]' "${f}" | awk '{print $2 ":" $5 "@" $0}')
    for line in "${lines[@]}"; do
        pair="${line%%@*}"
        clear_line="${line#*@}"
        hardlink="${pair%:*}"
        if [[ "${hardlink}" -eq 1 ]]; then
            echo "${clear_line}"
            continue
        fi
        size="${pair#*:}"
        key="${hardlink}:${size}"
        if [[ -n "${cache[${key}]:+isset}" ]]; then
            continue
        fi
        cache[${key}]=x
        echo "${clear_line}"
    done
}

if [ "$FILE" = flatcar_production_image_contents.txt ] || [ "$FILE" = flatcar_developer_container_contents.txt ]; then
  # Cut date and time noise away
  sed -i 's/....-..-.. ..:.. //g' "$A" "$B"
  # Sort by path
  sort -t / -k 2 --output "$A" "$A"
  sort -t / -k 2 --output "$B" "$B"
  if [ "$FILESONLY" = 1 ]; then
    cut -d . -f 2- "$A" > "$A.cut"
    mv "$A.cut" "$A"
    cut -d . -f 2- "$B" > "$B.cut"
    mv "$B.cut" "$B"
  fi
  if [ "$CUTKERNEL" = 1 ]; then
    sed -i -E 's#[0-9]+\.[0-9]+\.[0-9]+-flatcar#a.b.c-flatcar#g' "$A" "$B"
  fi
  if [ "$CALCSIZE" = 1 ]; then
    A_SUM=$(($(no_hardlinks "$A" | tr -c '[:graph:][:space:]' '?' | rev | cut -d ' ' -f 2 | rev | paste -sd+ -)))
    A_BOOT=$(($(no_hardlinks "$A" | grep " [\.]*/boot" | tr -c '[:graph:][:space:]' '?' | rev | cut -d ' ' -f 2 | rev | paste -sd+ -)))
    A_USR=$(($(no_hardlinks "$A" | grep " [\.]*/usr" | tr -c '[:graph:][:space:]' '?' | rev | cut -d ' ' -f 2 | rev | paste -sd+ -)))
    A_ROOT=$(($(no_hardlinks "$A" | grep -v " [\.]*/usr" | grep -v " [\.]*/boot" | tr -c '[:graph:][:space:]' '?' | rev | cut -d ' ' -f 2 | rev | paste -sd+ -)))
    echo "Sum: $((${A_SUM}/1024/1024)) MiB" > "$A"
    echo "Boot: $((${A_BOOT}/1024/1024)) MiB (must be < 60 MiB or updates will break)" >> "$A"
    echo "Usr: $((${A_USR}/1024/1024)) MiB (inc. sparse files)" >> "$A"
    echo "Rootfs: $((${A_ROOT}/1024/1024)) MiB" >> "$A"
    B_SUM=$(($(no_hardlinks "$B" | tr -c '[:graph:][:space:]' '?' | rev | cut -d ' ' -f 2 | rev | paste -sd+ -)))
    B_BOOT=$(($(no_hardlinks "$B" | grep " [\.]*/boot" | tr -c '[:graph:][:space:]' '?' | rev | cut -d ' ' -f 2 | rev | paste -sd+ -)))
    B_USR=$(($(no_hardlinks "$B" | grep " [\.]*/usr" | tr -c '[:graph:][:space:]' '?' | rev | cut -d ' ' -f 2 | rev | paste -sd+ -)))
    B_ROOT=$(($(no_hardlinks "$B" | grep -v " [\.]*/usr" | grep -v " [\.]*/boot" | tr -c '[:graph:][:space:]' '?' | rev | cut -d ' ' -f 2 | rev | paste -sd+ -)))
    echo "Sum: $((${B_SUM}/1024/1024)) MiB" > "$B"
    echo "Boot: $((${B_BOOT}/1024/1024)) MiB (must be < 60 MiB or updates will break)" >> "$B"
    echo "Usr: $((${B_USR}/1024/1024)) MiB (inc. sparse files)" >> "$B"
    echo "Rootfs: $((${B_ROOT}/1024/1024)) MiB" >> "$B"
  fi
fi

git diff "$A" "$B"
