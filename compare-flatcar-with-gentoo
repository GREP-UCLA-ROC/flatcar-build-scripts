#!/bin/bash

set -euo pipefail

shopt -s extglob

this_dir="$(dirname "${0}")"

: ${COREOS_OVERLAY:="${this_dir}/../coreos-overlay/main"}
: ${PORTAGE_STABLE:="${this_dir}/../portage-stable/main"}
: ${GENTOO:="${this_dir}/../gentoo"}
: ${WORKDIR:="$(mktemp --directory "${this_dir}/cfwg.XXXXXXXXXX")"}
: ${KEEP_WORKDIR:=}
: ${VERBOSE:=}

stderr() {
    printf '%s\n' "$*" >/dev/stderr
}

debug() {
    if [[ -z "${VERBOSE}" ]]; then
        return
    fi
    stderr "$@"
}

warn() {
    stderr 'WARNING:' "$@"
}

drop_trailing_slash() {
    local var_name="${1}"

    local -n var_ref="${var_name}"

    var_ref="${var_ref%%*(/)}"
}

drop_trailing_slash PORTAGE_STABLE
drop_trailing_slash COREOS_OVERLAY
drop_trailing_slash GENTOO
drop_trailing_slash WORKDIR

mkdir -p "${WORKDIR}"

if [[ -z "${KEEP_WORKDIR}" ]]; then
    trap "rm -rf '${WORKDIR}'" EXIT
else
    debug "WORKDIR='${WORKDIR}'" >&2
fi

debug "PORTAGE_STABLE=${PORTAGE_STABLE}"
debug "COREOS_OVERLAY=${COREOS_OVERLAY}"
debug "GENTOO=${GENTOO}"

prepend_with() {
    local field_count="${1}"
    local item="${2}"
    local arr_name="${3}"
    local -n arr_ref="${arr_name}"

    while [[ "${#arr_ref[@]}" -lt "${field_count}" ]]; do
        arr_ref=("${item}" "${arr_ref[@]}")
    done
}

append_with() {
    local field_count="${1}"
    local item="${2}"
    local arr_name="${3}"
    local -n arr_ref="${arr_name}"

    while [[ "${#arr_ref[@]}" -lt "${field_count}" ]]; do
        arr_ref+=("${item}")
    done
}

strip_leading_zeros() {
    local num_name="${1}"

    local -n num_ref="${num_name}"

    # strip all leading zeros, will work only if extglob is enabled
    num_ref="${num_ref##*(0)}"

    if [[ -z "${num_ref}" ]]; then
        num_ref='0'
    fi
}

get_plain_version() {
    local ver="${1}"
    local arr_name="${2}"

    # strip everything after first underline or dash, whichever comes
    # first, so for strings like 1.2.3_alpha or 1.2.3-r2 we get 1.2.3
    ver="${ver%%[-_]*}"
    IFS='.' read -ra "${arr_name}" <<< "${ver}"

    local i
    local -n arr_ref="${arr_name}"

    for i in $(seq 0 "$((${#arr_ref[@]}-1))"); do
        strip_leading_zeros "${arr_name}[${i}]"
    done
}

# last version field may have a letter
split_last_version_field() {
    local field="${1}"
    local num_name="${2}"
    local word_name="${3}"

    local -n num_ref="${num_name}"
    local -n word_ref="${word_name}"

    num_ref="${field%%*([a-z])}"
    word_ref="${field##*([0-9])}"

    strip_leading_zeros "${num_name}"
}

get_suffixes() {
    local ver="${1}"
    local arr_name="${2}"
    local ver_tmp

    if [[ ! "${ver}" =~ _ ]]; then
        local -n arr_ref="${arr_name}"
        arr_ref=()
        return
    fi
    ver_tmp="${ver#*_}"
    ver="${ver_tmp%-*}"
    IFS='_' read -ra "${arr_name}" <<< "${ver}"
}

split_suffix() {
    local suffix="${1}"
    local word_name="${2}"
    local num_name="${3}"

    local -n word_ref="${word_name}"
    local -n num_ref="${num_name}"

    word_ref="${suffix%%*([0-9])}"
    num_ref="${suffix##*([a-z])}"

    strip_leading_zeros "${num_name}"
}

get_revision() {
    local version="${1}"
    local rev_name="${2}"

    local -n rev_ref="${rev_name}"

    if [[ ! "${version}" =~ '-' ]]; then
        rev_ref='0'
        return
    fi
    rev_ref="${version##*-r}"

    strip_leading_zeros "${rev_name}"
}

declare -A SUFFIXES=(
    ['alpha']='0'
    ['beta']='1'
    ['pre']=2
    ['rc']=3
    # empty string can't be a key
    # ['']=4
    ['p']=5
)

get_suffix_word_index() {
    local word="${1}"
    local index_ref="${2}"

    local -n index="${index_ref}"

    # we can't put an empty key into the hash map
    if [[ -z "${word}" ]]; then
        index=4
        return
    fi
    # assign -1 to invalid suffix
    index="${SUFFIXES[${word}]--1}"
}

gentoo_vercmp() {
    local a_ver="${1}"
    local b_ver="${2}"
    local res_name="${3}"

    local -n res_ref="${res_name}"

    local -a a_nums
    local -a b_nums

    get_plain_version "${a_ver}" a_nums
    get_plain_version "${b_ver}" b_nums

    if [[ "${#a_nums[@]}" -ne "${#b_nums[@]}" ]]; then
        if [[ "${#a_nums[@]}" -gt "${#b_nums[@]}" ]]; then
            append_with "${#a_nums[@]}" 0 b_nums
        else
            append_with "${#b_nums[@]}" 0 a_nums
        fi
    fi

    local i
    local a
    local b

    # last field needs to be checked separately
    for i in $(seq 0 $(("${#a_nums[@]}" - 2))); do
        a="${a_nums[${i}]}"
        b="${b_nums[${i}]}"

        if [[ "${a}" -gt "${b}" ]]; then
            res_ref=">v${i}n"
            return
        fi
        if [[ "${a}" -lt "${b}" ]]; then
            res_ref="<v${i}n"
            return
        fi
    done

    local a_num
    local a_word
    local b_num
    local b_word

    i=$(("${#a_nums[@]}" - 1))
    a="${a_nums[${i}]}"
    b="${b_nums[${i}]}"

    split_last_version_field "${a}" a_num a_word
    split_last_version_field "${b}" b_num b_word

    if [[ "${a_num}" -gt "${b_num}" ]]; then
        res_ref=">v${i}n"
        return
    fi
    if [[ "${a_num}" -lt "${b_num}" ]]; then
        res_ref="<v${i}n"
        return
    fi
    if [[ "${a_word}" > "${b_word}" ]]; then
        res_ref=">v${i}w"
        return
    fi
    if [[ "${a_word}" < "${b_word}" ]]; then
        res_ref="<v${i}w"
        return
    fi

    # version is equal, let's see the suffixes

    local -a a_suffixes
    local -a b_suffixes

    get_suffixes "${a_ver}" a_suffixes
    get_suffixes "${b_ver}" b_suffixes

    if [[ "${#a_suffixes[@]}" -ne "${#b_suffixes[@]}" ]]; then
        if [[ "${#a_suffixes[@]}" -gt "${#b_suffixes[@]}" ]]; then
            append_with "${#a_suffixes[@]}" '' b_suffixes
        else
            append_with "${#b_suffixes[@]}" '' a_suffixes
        fi
    fi

    local a_word_index
    local b_word_index

    for i in $(seq 0 $(("${#a_suffixes[@]}" - 1))); do
        a="${a_suffixes[${i}]}"
        b="${b_suffixes[${i}]}"

        split_suffix "${a}" a_word a_num
        split_suffix "${b}" b_word b_num

        if [[ "${a_word}" = "${b_word}" ]]; then
            if [[ "${a_num}" -gt "${b_num}" ]]; then
                res_ref=">s${i}n"
                return
            fi
            if [[ "${a_num}" -lt "${b_num}" ]]; then
                res_ref="<s${i}n"
                return
            fi
        else
            get_suffix_word_index "${a_word}" a_word_index
            get_suffix_word_index "${b_word}" b_word_index

            if [[ "${a_word_index}" -gt "${b_word_index}" ]]; then
                res_ref=">s${i}w"
                return
            fi
            if [[ "${a_word_index}" -lt "${b_word_index}" ]]; then
                res_ref="<s${i}w"
                return
            fi
        fi
    done

    # suffixes are equal, check revisions
    local a_rev
    local b_rev

    get_revision "${a_ver}" a_rev
    get_revision "${b_ver}" b_rev

    if [[ "${a_rev}" -gt "${b_rev}" ]]; then
        res_ref=">r${i}"
        return
    fi
    if [[ "${a_rev}" -lt "${b_rev}" ]]; then
        res_ref="<r${i}"
        return
    fi

    # versions are equal
    res_ref='='
}

REPO_PAIRS=(
    "gentoo:${GENTOO}"
    "portage-stable:${PORTAGE_STABLE}"
    "coreos-overlay:${COREOS_OVERLAY}"
)

get_repo() {
    local pair="${1}"
    echo -n "${pair#*:}"
}

get_name() {
    local pair="${1}"
    echo -n "${pair%%:*}"
}

cut_leading_path() {
    local path="${1}"
    local len="${#path}"
    local line
    while read -r line; do
        echo "${line:${len}}"
    done
}

cut_leading_dir() {
    local path="${1}"

    cut_leading_path "${path}/"
}

if [[ ! -e "${WORKDIR}/duplicated-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/portage-stable-flatcar-only-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/coreos-overlay-flatcar-only-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/flatcar-only-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/portage-stable-common-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/coreos-overlay-common-pkgs" ]] || \
       [[ ! -e "${WORKDIR}/common-pkgs" ]]; then
    if [[ ! -e "${WORKDIR}/flatcar-pkgs" ]]; then
        for p in "gentoo:${GENTOO}" "portage-stable:${PORTAGE_STABLE}" "coreos-overlay:${COREOS_OVERLAY}"; do
            name="$(get_name "${p}")"

            if [[ ! -e "${WORKDIR}/${name}-pkgs" ]] || \
                   [[ ! -e "${WORKDIR}/${name}-hash" ]] || \
                   [[ ! -e "${WORKDIR}/${name}-date" ]]; then
                repo="$(get_repo "${p}")"
                debug "finding all packages in ${name} (${repo})"
                find "${repo}" -mindepth 3 -name '*.ebuild' |
                    sed -e 's!/[^/]*$!!' |
                    sort -u |
                    cut_leading_dir "${repo}" >"${WORKDIR}/${name}-pkgs"
                git -C "${repo}" log -1 --pretty='%H' >"${WORKDIR}/${name}-hash"
                git -C "${repo}" log -1 --pretty='%cD' >"${WORKDIR}/${name}-date"
            fi
        done

        cat "${WORKDIR}/coreos-overlay-pkgs" "${WORKDIR}/portage-stable-pkgs" | sort -u >"${WORKDIR}/flatcar-pkgs"
    fi

    debug "finding all duplicated packages in portage-stable and coreos-overlay"
    comm -1 -2 "${WORKDIR}/coreos-overlay-pkgs" "${WORKDIR}/portage-stable-pkgs" >"${WORKDIR}/duplicated-pkgs"

    debug "finding all flatcar-only packages in portage-stable"
    comm -2 -3 "${WORKDIR}/portage-stable-pkgs" "${WORKDIR}/gentoo-pkgs" >"${WORKDIR}/portage-stable-flatcar-only-pkgs"
    debug "finding all flatcar-only packages in coreos-overlay"
    comm -2 -3 "${WORKDIR}/coreos-overlay-pkgs" "${WORKDIR}/gentoo-pkgs" >"${WORKDIR}/coreos-overlay-flatcar-only-pkgs"
    debug "finding all flatcar-only packages"
    cat "${WORKDIR}/portage-stable-flatcar-only-pkgs" "${WORKDIR}/coreos-overlay-flatcar-only-pkgs" | sort -u >"${WORKDIR}/flatcar-only-pkgs"

    debug "finding all common packages in portage-stable"
    comm -1 -2 "${WORKDIR}/portage-stable-pkgs" "${WORKDIR}/gentoo-pkgs" >"${WORKDIR}/portage-stable-common-pkgs"
    debug "finding all common packages in coreos-overlay"
    comm -1 -2 "${WORKDIR}/coreos-overlay-pkgs" "${WORKDIR}/gentoo-pkgs" >"${WORKDIR}/coreos-overlay-common-pkgs"
    debug "finding all common packages"
    cat "${WORKDIR}/coreos-overlay-common-pkgs" "${WORKDIR}/portage-stable-common-pkgs" | sort -u >"${WORKDIR}/common-pkgs"
fi

get_pkg_name() {
    local name="${1}"
    echo -n "${name#*/}"
}

get_max_version() {
    local pkg="${1}"
    local max_version_name="${2}"

    shift 2

    local repo
    local pkg_path_prefix
    local -a ebuilds
    local e
    local version
    local result
    local -n max_version_ref="${max_version_name}"

    # this is quite a low version
    max_version_ref='0_alpha_alpha_alpha'

    for repo; do
        if [[ ! -d "${repo}/${pkg}" ]]; then
            continue
        fi

        pkg_path_prefix="${repo}/${pkg}/$(get_pkg_name "${pkg}")-"
        ebuilds=( "${pkg_path_prefix}"*.ebuild )

        for e in "${ebuilds[@]}"; do
            # strip prefix
            version="$(cut_leading_path "${pkg_path_prefix}" <<<"${e}")"
            # strip .ebuild
            version="${version:0:-7}"
            # ignore versions like 9999 or 99999999
            if [[ -z "${version//9}" ]]; then
                continue
            fi
            result='='
            gentoo_vercmp "${version}" "${max_version_ref}" result
            if [[ "${result}" = '>'* ]]; then
                max_version_ref="${version}"
            fi
        done
        return
    done
}

find_max_versions() {
    local input="${1}"
    local output="${2}"

    while read -r line; do
        debug "  - ${line}"
        gentoo_max=''
        get_max_version "${line}" gentoo_max "${GENTOO}"
        flatcar_max=''
        get_max_version "${line}" flatcar_max "${PORTAGE_STABLE}" "${COREOS_OVERLAY}"
        result='='
        gentoo_vercmp "${gentoo_max}" "${flatcar_max}" result
        printf '%s %s\n' "${line}" "gentoo:${gentoo_max} flatcar:${flatcar_max} result:${result}" >>"${output}"
    done < "${input}"
}

if [[ ! -e "${WORKDIR}/portage-stable-common-pkgs-max-versions" ]]; then
    debug "finding max versions of common packages in portage-stable"
    find_max_versions "${WORKDIR}/portage-stable-common-pkgs" "${WORKDIR}/portage-stable-common-pkgs-max-versions"
fi

if [[ ! -e "${WORKDIR}/coreos-overlay-common-pkgs-max-versions" ]]; then
    debug "finding max versions of common packages in coreos-overlay"
    find_max_versions "${WORKDIR}/coreos-overlay-common-pkgs" "${WORKDIR}/coreos-overlay-common-pkgs-max-versions"
fi

if [[ ! -e "${WORKDIR}/common-pkgs-max-versions" ]]; then
    debug "finding max versions of common packages"
    cat "${WORKDIR}/portage-stable-common-pkgs-max-versions" "${WORKDIR}/coreos-overlay-common-pkgs-max-versions" | sort -u >"${WORKDIR}/common-pkgs-max-versions"
fi

debug "done"

percent() {
    local num="${1}"
    local den="${2}"

    bc <<< "scale=2; (${num} * 100) / ${den}"
}

duplicates="$(cat "${WORKDIR}/duplicated-pkgs" | wc -l)"

if [[ "${duplicates}" -gt 0 ]]; then
    warn 'There are duplicated packages in portage-stable and coreos-overlay.'
    warn 'Some stats may be skewed or make no sense.'
    warn 'BEGIN DUPLICATES'
    cat "${WORKDIR}/duplicated-pkgs" >&2
    warn 'END DUPLICATES'
fi

# non-failing grep
nfgrep() {
    grep "$@" || :
}

equal="$(nfgrep -e 'result:=' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
outdated="$(nfgrep -e 'result:>' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
outdated_rel="$(nfgrep -e 'result:>r' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
outdated_suf="$(nfgrep -e 'result:>s' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
outdated_ver="$(nfgrep -e 'result:>v' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
newer="$(nfgrep -e 'result:<' "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
total="$(cat "${WORKDIR}/flatcar-pkgs" | wc -l)"
total_common="$(cat "${WORKDIR}/common-pkgs-max-versions" | wc -l)"
ours="$(cat "${WORKDIR}/flatcar-only-pkgs" | wc -l)"
ps_pkgs="$(cat "${WORKDIR}/portage-stable-pkgs" | wc -l)"
co_pkgs="$(cat "${WORKDIR}/coreos-overlay-pkgs" | wc -l)"

printf 'total packages:\t\t\t%s\t(%s%%)\n' "${total}" "$(percent "${total}" "${total}")"
printf 'portage-stable:\t\t\t%s\t(%s%%)\n' "${ps_pkgs}" "$(percent "${ps_pkgs}" "${total}")"
printf 'coreos-overlay:\t\t\t%s\t(%s%%)\n' "${co_pkgs}" "$(percent "${co_pkgs}" "${total}")"
printf '\n'
printf 'total packages:\t\t\t%s\t(%s%%)\n' "${total}" "$(percent "${total}" "${total}")"
printf 'our packages:\t\t\t%s\t(%s%%)\n' "${ours}" "$(percent "${ours}" "${total}")"
printf 'common packages:\t\t%s\t(%s%%)\n' "${total_common}" "$(percent "${total_common}" "${total}")"
printf '\n'
printf 'total common packages:\t\t%s\t(%s%%)\n' "${total_common}" "$(percent "${total_common}" "${total_common}")"
printf 'outdated packages:\t\t%s\t(%s%%)\n' "${outdated}" "$(percent "${outdated}" "${total_common}")"
printf 'equal packages:\t\t\t%s\t(%s%%)\n' "${equal}" "$(percent "${equal}" "${total_common}")"
printf 'newer packages:\t\t\t%s\t(%s%%)\n' "${newer}" "$(percent "${newer}" "${total_common}")"
printf '\n'
printf 'all outdated packages:\t\t%s\t(%s%%)\n' "${outdated}" "$(percent "${outdated}" "${outdated}")"
printf 'outdated release packages:\t%s\t(%s%%)\n' "${outdated_rel}" "$(percent "${outdated_rel}" "${outdated}")"
printf 'outdated suffix packages:\t%s\t(%s%%)\n' "${outdated_suf}" "$(percent "${outdated_suf}" "${outdated}")"
printf 'outdated version packages:\t%s\t(%s%%)\n' "${outdated_ver}" "$(percent "${outdated_ver}" "${outdated}")"
