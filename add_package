#!/usr/bin/env bash

set -e
shopt -s expand_aliases

if [ $# -ne 5 ]; then
    echo "usage: ${0} KEYS_DIR COREROLLER_URL ORIGIN_SSH_URL CHANNEL VERSION"
    exit 1
fi

KEYS_DIR="$1"
COREROLLER_URL="$2"
ORIGIN_SSH_URL="$3"
CHANNEL="$4"
VERSION="$5"

COREOS_APP_ID="e96281a6-d1af-4bde-9a0a-97b76e56dc57"

. resty -W "${COREROLLER_URL}/api" -u "${COREROLLER_USER}":"${COREROLLER_PASS}"

COLOR=$(GET /apps/"${COREOS_APP_ID}"/channels |& jq '.[] | select(.name=="'${CHANNEL}'").color')

IMAGES_DIR="${PWD}/$(mktemp -d img.XXXXX)"
mkdir -p "${IMAGES_DIR}"
trap 'rm -rf ${IMAGES_DIR}' EXIT

OUTPUT_PATH="${IMAGES_DIR}/flatcar_production_update.gz"

# Get updates and extract
REMOTE_URL="https://${CHANNEL}.release.flatcar-linux.net/amd64-usr/${VERSION}"/
UPDATE_URL="https://update.release.flatcar-linux.net/amd64-usr/${VERSION}"/
IMAGE_URL="${REMOTE_URL}/flatcar_production_update.bin.bz2"
IMAGE_URL_SIG="${REMOTE_URL}/flatcar_production_update.bin.bz2.sig"
KERNEL_URL="${REMOTE_URL}/flatcar_production_image.vmlinuz"
KERNEL_URL_SIG="${REMOTE_URL}/flatcar_production_image.vmlinuz.sig"

echo "Getting release files"
echo "flatcar_production_update.bin.bz2"
curl "${IMAGE_URL}" -o "${IMAGES_DIR}/flatcar_production_update.bin.bz2"
echo "flatcar_production_update.bin.bz2.sig"
curl "${IMAGE_URL_SIG}" -o "${IMAGES_DIR}/flatcar_production_update.bin.bz2.sig"
echo "flatcar_production_image.vmlinuz"
curl "${KERNEL_URL}" -o "${IMAGES_DIR}/flatcar_production_image.vmlinuz"
echo "flatcar_production_image.vmlinuz.sig"
curl "${KERNEL_URL_SIG}" -o "${IMAGES_DIR}/flatcar_production_image.vmlinuz.sig"

echo "Verifying files"
gpg --verify "${IMAGES_DIR}/flatcar_production_update.bin.bz2.sig"
gpg --verify "${IMAGES_DIR}/flatcar_production_image.vmlinuz.sig"

echo "Extracting flatcar_production_update.bin.bz2"
bunzip2 "${IMAGES_DIR}/flatcar_production_update.bin.bz2"

echo "Generating update payload"
if [ ! -f "${OUTPUT_PATH}" ]; then
    echo "Update payload not found. Building..."
    ./core_sign_update \
        --image "${IMAGES_DIR}/flatcar_production_update.bin" \
        --kernel "${IMAGES_DIR}/flatcar_production_image.vmlinuz" \
        --output "${OUTPUT_PATH}" \
        --private_keys "${KEYS_DIR}/dummy.key.pem+${KEYS_DIR}/flatcar.key.pem" \
        --public_keys "${KEYS_DIR}/dummy.pub.pem+${KEYS_DIR}/flatcar.pub.pem" \
        --keys_separator "+"
else
    echo "Found update payload ${OUTPUT_PATH}. Reusing."
fi

PAYLOAD_SIZE=$(ls -l "${OUTPUT_PATH}" | awk '{print $5}')
PAYLOAD_SHA1=$(cat "${OUTPUT_PATH}" | openssl dgst -sha1 -binary | base64)
PAYLOAD_SHA256=$(cat "${OUTPUT_PATH}" | openssl dgst -sha256 -binary | base64)

echo "Copying update payload to update server"

SERVER_UPDATE_DIR="/var/www/origin.release.flatcar-linux.net/update/amd64-usr/${VERSION}/"
ssh "core@${ORIGIN_SSH_URL}" mkdir -p "${SERVER_UPDATE_DIR}"
scp "${OUTPUT_PATH}" "core@${ORIGIN_SSH_URL}:${SERVER_UPDATE_DIR}"

PACKAGE_ID=$(GET /apps/"${COREOS_APP_ID}"/packages | jq '.[] | select(.version=="'${VERSION}'").id')

echo "Uploading update payload"

if [ -z "${PACKAGE_ID}" ]; then
    PACKAGE_ID=$(POST /apps/"${COREOS_APP_ID}"/packages " \
        {
            \"filename\": \"$(basename ${OUTPUT_PATH})\",
            \"description\": \"Flatcar Linux ${VERSION}\",
            \"url\": \"${UPDATE_URL}\",
            \"version\": \"${VERSION}\",
            \"type\": 1,
            \"size\": \"${PAYLOAD_SIZE}\",
            \"hash\": \"${PAYLOAD_SHA1}\",
            \"application_id\": \"${COREOS_APP_ID}\",
            \"coreos_action\":
                {
                    \"sha256\": \"${PAYLOAD_SHA256}\"
                }
        }
        " | jq .id)
else
    echo "Payload with version ${VERSION} already present. Skipping upload..."
fi

echo "Uploaded payload to Coreroller: ${PACKAGE_ID}"
